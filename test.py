import torch
import torch.nn as nn

weight = torch.FloatTensor([[1, 2.3, 3], [4, 5.1, 6.3]])
embedding = nn.Embedding.from_pretrained(weight)
input = torch.LongTensor([1])
print(embedding(input))

'''
from avp_predictor_pytorch import *

a = {"A":1}
#b = a.copy()
b = a
b["A"]+=1
print(a, b) #a==b=={"A":2}
'''

'''
driver = webdriver.Chrome()
driver.get('http://codes.bio/meta-iavp/')
search_box = driver.find_element_by_id("Sequence")
print('-------------')
analyzer = AVPClassifier() #from PYTORCH

all_sampled_seqs=[['ATGATTATAGATCCATATGTGATACCGTATACGACCCTTCGAGTCAGAGTGTAATAAAGGATCAACAACCACAGTTACGGAAACAAAAGTCTAGTCTACTATTAATACCGTGATAGTGACACCCCAGTAGTGAPPPPPPPPPPPPPPPPPPPPPPPP', 'ATGGGTCAAAGGACTAGCGCATAGAGCGAACACGTCTACAGAGAGTCCCACTTCCCTAGGGCTAATACCATTCGTATTCCTAGCAGCGTAGATTCTAGTCCGACAGACGAGTTCTGATAGCAGAGGCTCCAAACCAAGATCCACGTGGAGTTTGTGA','ATGCCACGTAGAATTAAGCGCGCGGTGAACTAAGGCAATTCAGGGACAACTTATCCTTTCGCCCAATATGTGATTTACTTGTCAGGCGAGGCAAAGCCTGAAGGCTAGAAAAACTAGGTGGAPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'],['ATGCCACGTAGAATTAAGCGCGCGGTGAACTAAGGCAATTCAGGGACAACTTATCCTTTCGCCCAATATGTGATTTACTTGTCAGGCGAGGCAAAGCCTGAAGGCTAGAAAAACTAGGTGGAPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP']]

for i in all_sampled_seqs:
    preds = analyzer.predict_model(i, driver, search_box)
'''
